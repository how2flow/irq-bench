diff --git a/drivers/clocksource/arm_arch_timer.c b/drivers/clocksource/arm_arch_timer.c
index fee1c4bf1021..a9048bd9948a 100644
--- a/drivers/clocksource/arm_arch_timer.c
+++ b/drivers/clocksource/arm_arch_timer.c
@@ -949,6 +949,9 @@ static void arch_counter_set_user_access(void)
 			| ARCH_TIMER_VIRT_EVT_EN
 			| ARCH_TIMER_USR_PCT_ACCESS_EN);
 
+	cntkctl &= ~(ARCH_TIMER_USR_VT_ACCESS_EN | ARCH_TIMER_VIRT_EVT_EN);
+	cntkctl |= ARCH_TIMER_USR_PCT_ACCESS_EN;
+
 	/*
 	 * Enable user access to the virtual counter if it doesn't
 	 * need to be workaround. The vdso may have been already
@@ -957,7 +960,7 @@ static void arch_counter_set_user_access(void)
 	if (arch_timer_this_cpu_has_cntvct_wa())
 		pr_info("CPU%d: Trapping CNTVCT access\n", smp_processor_id());
 	else
-		cntkctl |= ARCH_TIMER_USR_VCT_ACCESS_EN;
+		cntkctl |= ARCH_TIMER_USR_PCT_ACCESS_EN;
 
 	arch_timer_set_cntkctl(cntkctl);
 }
@@ -1091,9 +1094,9 @@ static void __init arch_counter_register(unsigned type)
 		if ((IS_ENABLED(CONFIG_ARM64) && !is_hyp_mode_available()) ||
 		    arch_timer_uses_ppi == ARCH_TIMER_VIRT_PPI) {
 			if (arch_timer_counter_has_wa())
-				rd = arch_counter_get_cntvct_stable;
+				rd = arch_counter_get_cntpct_stable;
 			else
-				rd = arch_counter_get_cntvct;
+				rd = arch_counter_get_cntpct;
 		} else {
 			if (arch_timer_counter_has_wa())
 				rd = arch_counter_get_cntpct_stable;
@@ -1354,7 +1357,7 @@ static enum arch_timer_ppi_nr __init arch_timer_select_ppi(void)
 		return ARCH_TIMER_HYP_PPI;
 
 	if (!is_hyp_mode_available() && arch_timer_ppi[ARCH_TIMER_VIRT_PPI])
-		return ARCH_TIMER_VIRT_PPI;
+		return ARCH_TIMER_PHYS_NONSECURE_PPI;
 
 	if (IS_ENABLED(CONFIG_ARM64))
 		return ARCH_TIMER_PHYS_NONSECURE_PPI;
